{"version":3,"file":"FFMpegCaptureManager.js","sourceRoot":"","sources":["../../canvasToMp4/FFMpegCaptureManager.ts"],"names":[],"mappings":"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","sourcesContent":["var child_process = require(\"child_process\");\r\nclass FFMpegCaptureManager extends EventDispatcher {\r\n\r\n  public static FFMPEG_ENCODER_START:string = \"ENCODE_START\";\r\n  public static FRAME_CAPTURED:string = \"FRAME_CAPTURED\";\r\n  public static FRAME_ENCODED:string = \"FRAME_ENCODED\";\r\n  public static FILE_CREATION_COMPLETED:string = \"FILE_CREATED\";\r\n  public static LOG:string = \"LOG\";\r\n\r\n  protected logs:string;\r\n  protected lastLog:string;\r\n\r\n  protected frameTotal:number;\r\n  protected frameCaptured:number;\r\n  protected frameEncoded:number;\r\n\r\n  private uint8array:Uint8Array;\r\n  protected process:any;\r\n\r\n\r\n  private started:boolean = false;\r\n  private completed:boolean = false;\r\n\r\n\r\n\r\n  public data:any;\r\n  private captureMode:boolean = true;\r\n\r\n  private command:FFmpegCommand;\r\n\r\n  constructor(command:FFmpegCommand){\r\n    super();\r\n    this.init(command);\r\n  }\r\n\r\n  public init(command:FFmpegCommand):void{\r\n\r\n    this.command = command;\r\n\r\n    var w = command.width;\r\n    var h = command.height;\r\n    var encoderType = command.encoderType;\r\n\r\n    this.captureMode = encoderType != \"pngToMp4\" && encoderType != \"swfToMp4\";\r\n\r\n    if(!this.uint8array || this.uint8array.length != (w * h * 4) ) this.uint8array = new Uint8Array(w*h*4);\r\n    //console.log(\"init \",w,h)\r\n    var th = this;\r\n    this.process = child_process.spawn(\"ffmpeg\",command.values);\r\n    this.process.stderr.on('data',function(data){\r\n      var dataStr = \"\"+data;\r\n      var type = dataStr.split(\" \")[0];\r\n      console.log(dataStr)\r\n      switch(type){\r\n        case \"ffmpeg\":\r\n          th.data = dataStr;\r\n          th.dispatchEvent(FFMpegCaptureManager.FFMPEG_ENCODER_START);\r\n          break;\r\n        case \"frame=\":\r\n          th.data = th.parseFrameObject(dataStr);\r\n          th.frameEncoded = th.data.frame;\r\n          th.dispatchEvent(FFMpegCaptureManager.FRAME_ENCODED);\r\n          th.captureFrame();\r\n\r\n          if(encoderType == \"h264_nvenc\"){\r\n            if( th.data.speed.lastIndexOf(\"subtitle:\") != -1){\r\n              th.dispatchEvent(FFMpegCaptureManager.FILE_CREATION_COMPLETED)\r\n            }\r\n          }\r\n          break;\r\n        case \"[libx264\":\r\n          th.dispatchEvent(FFMpegCaptureManager.FILE_CREATION_COMPLETED)\r\n          break;\r\n\r\n      }\r\n\r\n      th.lastLog = dataStr +\"\\n\";\r\n      th.logs += th.lastLog;\r\n      th.dispatchEvent(FFMpegCaptureManager.LOG);\r\n    })\r\n\r\n  }\r\n\r\n\r\n  private nextFrame:string;\r\n  private dif:number = 20;\r\n  private target:{ctx:CanvasRenderingContext2D|WebGLRenderingContext};\r\n  private targetContext:CanvasRenderingContext2D|WebGLRenderingContext;\r\n\r\n\r\n  private captureFrame():void{\r\n    if(this.frameCaptured > this.frameTotal) this.end();\r\n    else if(this.frameCaptured - this.frameEncoded < this.dif){\r\n      if(this.captureMode) this.target[this.nextFrame](this.frameCaptured / this.frameTotal);\r\n      this.capture(this.targetContext);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  public start(target:{ctx:CanvasRenderingContext2D|WebGLRenderingContext},updateFunctionName:string){\r\n    this.frameTotal = this.command.nbFrameTotal;\r\n    this.frameCaptured = this.frameEncoded = 0;\r\n    this.nextFrame = updateFunctionName;\r\n    this.targetContext = target.ctx;\r\n    this.target = target;\r\n\r\n    this.captureFrame();\r\n  }\r\n\r\n  private parseFrameObject(data:string):{ speed:string , bitrate:string , size:string , q:string , fps:string , frame:number }{\r\n    var o:any = {};\r\n    var t2;\r\n    var t = data.split(\"speed=\");\r\n    o.speed = t[1];\r\n\r\n    t2 = t[0].split(\"bitrate=\");\r\n    o.bitrate = t2[1];\r\n\r\n    t = t2[0].split(\"time=\");\r\n    o.time = t[1];\r\n\r\n    t2 = t[0].split(\"size=\");\r\n    o.size = Number(t2[1].split(\"kB\")[0]);\r\n\r\n    t = t2[0].split(\"q=\");\r\n    o.q = t[1];\r\n\r\n    t2 = t[0].split(\"fps=\");\r\n    o.fps = t2[1];\r\n\r\n    t = t2[0].split(\"frame=\");\r\n    o.frame = Number(t[1]);\r\n\r\n    return o;\r\n  }\r\n\r\n  public get captureProgress():number{\r\n    if(this.frameTotal>0) return this.frameCaptured / this.frameTotal;\r\n    return 0;\r\n  }\r\n  public get encodingProgress():number{ return this.frameEncoded / this.frameTotal; }\r\n  public end():void{  this.process.stdin.end(); }\r\n\r\n  public get nbFrameCaptured():number{return this.frameCaptured;}\r\n  public get nbFrameEncoded():number{return this.frameEncoded;}\r\n  public get nbFrameTotal():number{return this.frameTotal;}\r\n\r\n  public capture(ctx:CanvasRenderingContext2D|WebGLRenderingContext):boolean{\r\n    if(!this.process ) return;\r\n    if(this.captureMode == false){\r\n      this.frameCaptured++;\r\n      this.dispatchEvent(FFMpegCaptureManager.FRAME_CAPTURED);\r\n      return;\r\n    }\r\n\r\n    if(ctx instanceof CanvasRenderingContext2D){\r\n      this.process.stdin.write(new Buffer( new Uint8Array( ctx.getImageData(0,0,ctx.canvas.width,ctx.canvas.height).data.buffer)      ,\"binary\"));\r\n    }else{\r\n      ctx.readPixels(0, 0, ctx.canvas.width, ctx.canvas.height, ctx.RGBA, ctx.UNSIGNED_BYTE, this.uint8array);\r\n      this.process.stdin.write(new Buffer(this.uint8array,\"binary\"));\r\n    }\r\n\r\n    this.frameCaptured++;\r\n\r\n    this.dispatchEvent(FFMpegCaptureManager.FRAME_CAPTURED);\r\n    this.captureFrame();\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]}
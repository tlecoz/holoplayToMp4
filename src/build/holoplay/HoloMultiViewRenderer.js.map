{"version":3,"file":"HoloMultiViewRenderer.js","sourceRoot":"","sources":["../../holoplay/HoloMultiViewRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["class HoloMultiViewRenderer extends THREE.WebGLRenderTarget {\r\n\r\n\r\n  public holoplay:HoloPlay;\r\n\r\n  protected scene:THREE.Scene;\r\n  protected camera:THREE.PerspectiveCamera;\r\n  protected renderer:THREE.WebGLRenderer;\r\n\r\n\r\n  protected w:number;\r\n  protected h:number;\r\n  protected viewW:number;\r\n  protected viewH:number;\r\n  protected x:number;\r\n  protected y:number;\r\n\r\n  //camera variables :\r\n  public focalPointVector:Float32Array = new Float32Array(3);\r\n  public constantCenter:boolean;\r\n  public center:THREE.Vector3;\r\n  public viewScale:number;\r\n\r\n  public viewCone:number;\r\n  protected startNear:number;\r\n  protected startFar:number;\r\n  protected startDist:number;\r\n  protected cameraForward:THREE.Vector3;\r\n  protected cameras:any;\r\n\r\n\r\n\r\n\r\n  constructor(holoplay:HoloPlay,viewWidth:number=1024,viewHeight:number=1024,nbX:number=8,nbY:number=6){\r\n    super(2048,2048,{ format: THREE.RGBAFormat });\r\n\r\n    this.scene = holoplay.scene;\r\n    this.camera = holoplay.camera;\r\n    this.renderer = holoplay.renderer;\r\n\r\n    this.init(viewWidth,viewHeight,nbX,nbY);\r\n  }\r\n\r\n  public init(viewWidth:number=1024,viewHeight:number=1024,nbX:number=8,nbY:number=6){\r\n    this.viewW = viewWidth;\r\n    this.viewH = viewHeight;\r\n    this.x = nbX;\r\n    this.y = nbY;\r\n    this.w = viewWidth * nbX;\r\n    this.h = viewHeight * nbY;\r\n    this.setSize(this.w,this.h);\r\n    this.setupCameras();\r\n  }\r\n\r\n\r\n  public get nbX():number{return this.x;}\r\n  public get nbY():number{return this.y;}\r\n  public get nbView():number{return this.x * this.y;}\r\n  public get viewWidth():number{return this.viewW;}\r\n  public get viewHeight():number{return this.viewH;}\r\n  public get textureWidth():number{return this.w;}\r\n  public get textureHeight():number{return this.h;}\r\n\r\n  public setupCameras(constantCenter:boolean=true,focalPointVector:THREE.Vector3=null){\r\n    this.cameraForward = new THREE.Vector3(0,0,0);\r\n    this.camera.getWorldDirection(this.cameraForward);\r\n\r\n    if(focalPointVector){\r\n       this.focalPointVector.set([focalPointVector.x,focalPointVector.y,focalPointVector.z]);\r\n       this.center = new THREE.Vector3(focalPointVector[0], focalPointVector[1], focalPointVector[2]);\r\n       this.viewScale = Math.max(this.center.distanceTo(this.camera.position), 1) //Sets the focal distance to either the distance to center or just ahead of the camera\r\n\r\n\r\n    }else{\r\n\r\n      var vector = new THREE.Vector3();\r\n      this.camera.getWorldDirection(vector); //Sets the vector to the camera forward\r\n\r\n      this.viewScale = Math.max(this.camera.position.length(), 1);\r\n      //Sets the focal distance to either the distance to center or just ahead of the camera\r\n      //Because no center was provided in the constructor, it assumes that the center is 0,0,0\r\n\r\n      this.center = new THREE.Vector3(0,0,0);\r\n      vector.multiplyScalar(this.viewScale);\r\n      this.focalPointVector.set([this.camera.position.x + vector.x, this.camera.position.y + vector.y, this.camera.position.z + vector.z]);\r\n      //Sets the focal point to the front of the camera as far away as it is from (0,0,0)\r\n    }\r\n\r\n    this.constantCenter = constantCenter;\r\n\r\n\r\n    this.viewCone = 40;\r\n\r\n    this.startNear = this.camera.near;\r\n    this.startFar = this.camera.far;\r\n    this.startDist = this.viewScale;\r\n\r\n    //render texture dimensions\r\n    var nbX = this.nbX;\r\n    var nbY = this.nbY;\r\n    var renderSizeX = this.viewW>>0;//renderResolution / tilesX;\r\n    var renderSizeY = this.viewH>>0;//renderResolution / tilesY;\r\n\r\n    //arraycamera\r\n    var cameras = [];\r\n    var subCamera:any;\r\n    var x,y,nbX = this.x,nbY = this.y;\r\n    for ( y = 0; y < nbY; y ++ ) {\r\n      for ( x = 0; x < nbX; x ++ ) {\r\n        subCamera = new THREE.PerspectiveCamera();\r\n        subCamera.viewport = new THREE.Vector4( x * renderSizeX,y * renderSizeY, renderSizeX, renderSizeY );\r\n        cameras.push(subCamera);\r\n      }\r\n    }\r\n\r\n    this.cameras = new THREE[\"ArrayCamera\"](cameras);\r\n\r\n  }\r\n\r\n\r\n  public captureViews(){\r\n\r\n      if(!this.cameras) return;\r\n\r\n      const renderer:THREE.WebGLRenderer = this.renderer;\r\n\r\n      //renderer.clearTarget(this,true,true,true)\r\n\r\n      renderer.setRenderTarget(this);\r\n      renderer.clear(true,true,true);\r\n\r\n\r\n\r\n\r\n      const cam:any = this.camera;\r\n      var worldRight = new THREE.Vector3(1,0,0);\r\n      cam.right = worldRight.applyQuaternion(cam.quaternion);\r\n\r\n      if(this.constantCenter === false){\r\n          cam.getWorldDirection(this.cameraForward);\r\n          this.cameraForward.multiplyScalar(this.viewScale);\r\n          this.center.addVectors(cam.position, this.cameraForward);\r\n      } else{\r\n\r\n          var dist = cam.position.distanceTo(this.center);\r\n          cam.near = this.startNear * dist / this.viewScale;\r\n          cam.far = this.startFar * dist / this.viewScale;\r\n          cam.updateProjectionMatrix();\r\n      }\r\n\r\n\r\n\r\n      const scene = this.scene;\r\n      const origPosition = new THREE.Vector3(cam.position.x, cam.position.y, cam.position.z);\r\n      const start = -this.viewCone/2;\r\n      const end = this.viewCone/2;\r\n      const distance = this.center.distanceTo(cam.position);\r\n      const size = 2 * distance * Math.tan(0.5 * THREE.Math.degToRad(cam.fov));\r\n      const cameras = this.cameras;\r\n      let subcamera;\r\n      let radians,offsetX,offsetY,tempRight;\r\n      cameras.copy(cam);\r\n\r\n      let i,len = this.nbView;\r\n      for(i = 0; i < len; i++) {\r\n\r\n          subcamera = cameras.cameras[ i ];\r\n          subcamera.position.copy(origPosition);\r\n          subcamera.rotation.copy(cam.rotation);\r\n\r\n          radians = THREE.Math.degToRad(THREE.Math[\"lerp\"](start, end, i/(len - 1)));\r\n\r\n          //angle needs to be in radians\r\n          offsetX = distance * Math.tan(radians);\r\n\r\n          //Get the right direction\r\n          tempRight = new THREE.Vector3(cam.right.x * offsetX, cam.right.y * offsetX, cam.right.z * offsetX);\r\n\r\n          subcamera.position.add(tempRight);\r\n          subcamera.updateMatrixWorld();\r\n\r\n          subcamera.projectionMatrix.copy(cam.projectionMatrix);\r\n          subcamera.projectionMatrix.elements[8] = -2 * offsetX / (size * cam.aspect);\r\n      }\r\n\r\n\r\n     renderer.render(scene, this.cameras);\r\n     renderer.setRenderTarget(null);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]}